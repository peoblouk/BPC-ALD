
------ Insert Sort ------

Vector is sorted. OK :-)

Sorting time: 0.000000 seconds.

Operations using positions:
 Comparisons: 9
 Swaps: 0
 Moves: 0
 Value Gets: 9
 Value Sets: 9

Operations using iterators:
 Comparisons: 0
 Swaps: 0
 Moves: 0
 Value Gets: 0
 Value Sets: 0

------ Shell Sort ------

Vector is sorted. OK :-)

Sorting time: 0.000000 seconds.

Operations using positions:
 Comparisons: 16
 Swaps: 0
 Moves: 0
 Value Gets: 16
 Value Sets: 16

Operations using iterators:
 Comparisons: 0
 Swaps: 0
 Moves: 0
 Value Gets: 0
 Value Sets: 0

------ Quick Sort ------

Vector is sorted. OK :-)

Sorting time: 0.000000 seconds.

Operations using positions:
 Comparisons: 31
 Swaps: 6
 Moves: 0
 Value Gets: 6
 Value Sets: 0

Operations using iterators:
 Comparisons: 0
 Swaps: 0
 Moves: 0
 Value Gets: 0
 Value Sets: 0

------ Heap Sort (iterators, top_down) ------

Vector is sorted. OK :-)

Sorting time: 0.000000 seconds.

Operations using positions:
 Comparisons: 0
 Swaps: 0
 Moves: 0
 Value Gets: 0
 Value Sets: 0

Operations using iterators:
 Comparisons: 41
 Swaps: 0
 Moves: 30
 Value Gets: 14
 Value Sets: 14

------ Heap Sort (no iterators, top_down) ------

Vector is sorted. OK :-)

Sorting time: 0.000000 seconds.

Operations using positions:
 Comparisons: 41
 Swaps: 0
 Moves: 30
 Value Gets: 14
 Value Sets: 14

Operations using iterators:
 Comparisons: 0
 Swaps: 0
 Moves: 0
 Value Gets: 0
 Value Sets: 0

------ Merge Sort ------

Vector is sorted. OK :-)

Sorting time: 0.000000 seconds.

Operations using positions:
 Comparisons: 15
 Swaps: 0
 Moves: 34
 Value Gets: 0
 Value Sets: 0

Operations using iterators:
 Comparisons: 0
 Swaps: 0
 Moves: 0
 Value Gets: 0
 Value Sets: 0

------ Merge Sort (with span) ------

Vector is sorted. OK :-)

Sorting time: 0.000000 seconds.

Operations using positions:
 Comparisons: 15
 Swaps: 0
 Moves: 34
 Value Gets: 0
 Value Sets: 0

Operations using iterators:
 Comparisons: 0
 Swaps: 0
 Moves: 0
 Value Gets: 0
 Value Sets: 0

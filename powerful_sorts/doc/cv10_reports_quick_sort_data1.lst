
------ Insert Sort ------

Vector is sorted. OK :-)

Sorting time: 0.000000 seconds.

Operations using positions:
 Comparisons: 1
 Swaps: 0
 Moves: 0
 Value Gets: 1
 Value Sets: 1

Operations using iterators:
 Comparisons: 0
 Swaps: 0
 Moves: 0
 Value Gets: 0
 Value Sets: 0

------ Shell Sort ------

Vector is sorted. OK :-)

Sorting time: 0.000000 seconds.

Operations using positions:
 Comparisons: 1
 Swaps: 0
 Moves: 0
 Value Gets: 1
 Value Sets: 1

Operations using iterators:
 Comparisons: 0
 Swaps: 0
 Moves: 0
 Value Gets: 0
 Value Sets: 0

------ Quick Sort ------

Vector is sorted. OK :-)

Sorting time: 0.000000 seconds.

Operations using positions:
 Comparisons: 3
 Swaps: 1
 Moves: 0
 Value Gets: 1
 Value Sets: 0

Operations using iterators:
 Comparisons: 0
 Swaps: 0
 Moves: 0
 Value Gets: 0
 Value Sets: 0

------ Heap Sort (iterators, top_down) ------

Vector is sorted. OK :-)

Sorting time: 0.000000 seconds.

Operations using positions:
 Comparisons: 0
 Swaps: 0
 Moves: 0
 Value Gets: 0
 Value Sets: 0

Operations using iterators:
 Comparisons: 1
 Swaps: 0
 Moves: 2
 Value Gets: 2
 Value Sets: 2

------ Heap Sort (no iterators, top_down) ------

Vector is sorted. OK :-)

Sorting time: 0.000000 seconds.

Operations using positions:
 Comparisons: 1
 Swaps: 0
 Moves: 2
 Value Gets: 2
 Value Sets: 2

Operations using iterators:
 Comparisons: 0
 Swaps: 0
 Moves: 0
 Value Gets: 0
 Value Sets: 0

------ Merge Sort ------

Vector is sorted. OK :-)

Sorting time: 0.000000 seconds.

Operations using positions:
 Comparisons: 1
 Swaps: 0
 Moves: 2
 Value Gets: 0
 Value Sets: 0

Operations using iterators:
 Comparisons: 0
 Swaps: 0
 Moves: 0
 Value Gets: 0
 Value Sets: 0

------ Merge Sort (with span) ------

Vector is sorted. OK :-)

Sorting time: 0.000000 seconds.

Operations using positions:
 Comparisons: 1
 Swaps: 0
 Moves: 2
 Value Gets: 0
 Value Sets: 0

Operations using iterators:
 Comparisons: 0
 Swaps: 0
 Moves: 0
 Value Gets: 0
 Value Sets: 0

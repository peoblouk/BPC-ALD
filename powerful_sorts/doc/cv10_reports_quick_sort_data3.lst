
------ Insert Sort ------

Vector is sorted. OK :-)

Sorting time: 0.000000 seconds.

Operations using positions:
 Comparisons: 24
 Swaps: 0
 Moves: 18
 Value Gets: 7
 Value Sets: 7

Operations using iterators:
 Comparisons: 0
 Swaps: 0
 Moves: 0
 Value Gets: 0
 Value Sets: 0

------ Shell Sort ------

Vector is sorted. OK :-)

Sorting time: 0.000000 seconds.

Operations using positions:
 Comparisons: 24
 Swaps: 0
 Moves: 16
 Value Gets: 12
 Value Sets: 12

Operations using iterators:
 Comparisons: 0
 Swaps: 0
 Moves: 0
 Value Gets: 0
 Value Sets: 0

------ Quick Sort ------

Vector is sorted. OK :-)

Sorting time: 0.000000 seconds.

Operations using positions:
 Comparisons: 27
 Swaps: 8
 Moves: 0
 Value Gets: 6
 Value Sets: 0

Operations using iterators:
 Comparisons: 0
 Swaps: 0
 Moves: 0
 Value Gets: 0
 Value Sets: 0

------ Heap Sort (iterators, top_down) ------

Vector is sorted. OK :-)

Sorting time: 0.000000 seconds.

Operations using positions:
 Comparisons: 0
 Swaps: 0
 Moves: 0
 Value Gets: 0
 Value Sets: 0

Operations using iterators:
 Comparisons: 27
 Swaps: 0
 Moves: 20
 Value Gets: 11
 Value Sets: 11

------ Heap Sort (no iterators, top_down) ------

Vector is sorted. OK :-)

Sorting time: 0.000000 seconds.

Operations using positions:
 Comparisons: 27
 Swaps: 0
 Moves: 20
 Value Gets: 11
 Value Sets: 11

Operations using iterators:
 Comparisons: 0
 Swaps: 0
 Moves: 0
 Value Gets: 0
 Value Sets: 0

------ Merge Sort ------

Vector is sorted. OK :-)

Sorting time: 0.000000 seconds.

Operations using positions:
 Comparisons: 16
 Swaps: 0
 Moves: 24
 Value Gets: 0
 Value Sets: 0

Operations using iterators:
 Comparisons: 0
 Swaps: 0
 Moves: 0
 Value Gets: 0
 Value Sets: 0

------ Merge Sort (with span) ------

Vector is sorted. OK :-)

Sorting time: 0.000000 seconds.

Operations using positions:
 Comparisons: 16
 Swaps: 0
 Moves: 24
 Value Gets: 0
 Value Sets: 0

Operations using iterators:
 Comparisons: 0
 Swaps: 0
 Moves: 0
 Value Gets: 0
 Value Sets: 0
